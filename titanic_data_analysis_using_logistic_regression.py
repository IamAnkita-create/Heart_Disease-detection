# -*- coding: utf-8 -*-
"""Titanic_data_analysis_using_logistic_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rPHL7IK3-zwx4A-p9Kn1GQx3tTjdtMkL

**Titanic Data Analysis**

**1 collecting data**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
import math

#importing dataset
titanic_data=pd.read_csv("Titanic_data.csv")
titanic_data.head(5)

#calculating number of passengers 
print("number of total passengers on-board:"+str(len(titanic_data.index)))

"""**2 DATA Analysis**"""

#lets analyse all data that we have
#lets plot a count plot between passengers who survived and who didn't : using seaborn library for that 
sns.countplot(x="Survived",data=titanic_data)

#lets plot a count plot between passengers who survived and who didn't were male of female
sns.countplot(x="Survived",hue="Sex",data=titanic_data)

#lets plot a count plot between passengers who survived and who didn't was from which passenger class
sns.countplot(x="Survived",hue="Pclass",data=titanic_data)

#now let's see people were of what age were on-board : plotting historgram for that
titanic_data["Age"].plot.hist()

#for fare graph
#titanic_data["Fare"].plot.hist()
#but now w=if we need more clear graph :
titanic_data["Fare"].plot.hist(bin=20,figsize=(10,5))

# let's try names for checking how strings will be printed
#titanic_data["Name"].plot.hist()
#lol string won't be printed

#not lets plot for siblings on-board
titanic_data["SibSp"].plot.hist()

titanic_data.info()

#NOW DATA ANALYSIS OVER

"""**3 Data Wrangling**"""

#now we have to check if our data has any null values , any nan values etc or not and remove them!!

titanic_data.isnull()
#true = null and false = not null

#after running this we see we have null vales but as the data is big enough it can't be displayed here so we can check this by 2 methods :
# 1: taking sum of all null values present in each column
# 2: or By plotting heat graph

# let's try sum of all null values in each column first :
titanic_data.isnull().sum()

#now we see we have null values present in age , cabin and in embared column..
#we can also see this by plotting a heat graph by using seaborn library for that
#cmap for color and if no need color then add cbar=False
yticklabels=0
sns.heatmap(titanic_data.isnull(), yticklabels==False,cmap='inferno')

#lets check the boxplot
sns.boxplot(x="Pclass",y="Age",data=titanic_data)

#now to remove these null values we can add dummy values using pandas or we can drop the column

#now lets perform data wrangling
titanic_data.head(5)

#now we see cabin has nan values so let's drop it
#titanic_data.drop("Cabin",axis=1,inplace=True)
#okay this has error... other way is 
titanic_data.dropna(inplace=True)
titanic_data.head()

#lets check by plotting heat map
sns.heatmap(titanic_data.isnull(), yticklabels=False,cbar=False)
#its a black box means no nan values
#now lets check by plotting sum
titanic_data.isnull().sum()

# now we have strings which is a problem now lets clean that:we can do that by converting variables into dummy variables using pandas 
#In ML make sure there are no string values
pd.get_dummies(titanic_data['Sex'])

#now we don't need both male or female just one is sufficient so we drop one of them
sex=pd.get_dummies(titanic_data['Sex'],drop_first=True)
sex.head(5)

#in embarhed we have S,C,Q
embark=pd.get_dummies(titanic_data["Embarked"])
embark.head(5)

Pcl=pd.get_dummies(titanic_data["Pclass"],drop_first=True)
Pcl.head(5)

#now we created categorial values now lets concatinate them 
titanic_data=pd.concat([titanic_data,sex,embark,Pcl],axis=1)
titanic_data.head(5)

#now lets drop the old sex,embark and Pclass and all unnessary columns
titanic_data.drop(['Sex','Embarked','Pclass','Name','Ticket','PassengerId','Cabin'],axis=1,inplace=True)
titanic_data.head(5)

titanic_data.isnull().sum()

"""**Now data cleansing is done.**
**Lets do training and testing of data and build model and predict reult**
"""

X=titanic_data.drop("Survived",axis=1)
y=titanic_data["Survived"]

from sklearn.model_selection import train_test_split
from sklearn import datasets
from sklearn import svm

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=1)

from sklearn.linear_model import LogisticRegression

logmodel=LogisticRegression()

logmodel.fit(X_train,y_train)

prediction=logmodel.predict(X_test)

"""**NOW LET'S CHECK ACCURACY OR CLASSIFICATION REPORT**"""

from sklearn.metrics import classification_report

classification_report(y_test,prediction)
#now we got precision we can also calculate accuracy

#for accuracy
from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, prediction)

from sklearn.metrics import accuracy_score
accuracy_score(y_test,prediction)

|